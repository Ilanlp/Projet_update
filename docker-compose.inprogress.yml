# ===========================================
# JOBMARKET INFRASTRUCTURE
# ===========================================

x-airflow-common: &airflow-common
  image: ${AIRFLOW_IMAGE_NAME:-apache/airflow:2.8.1}
  environment: &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
    AIRFLOW__CORE__FERNET_KEY: ""
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: "true"
    AIRFLOW__CORE__LOAD_EXAMPLES: "true"
    AIRFLOW__API__AUTH_BACKEND: "airflow.api.auth.backend.basic_auth"
    AIRFLOW__SMTP__SMTP_HOST: "smtp.gmail.com"
    AIRFLOW__SMTP__SMTP_PORT: 587
    AIRFLOW__SMTP__SMTP_USER: "de.airflow@gmail.com"
    AIRFLOW__SMTP__SMTP_PASSWORD: "cfsrvkongsobheta"
    AIRFLOW__SMTP__SMTP_MAIL_FROM: "de.airflow@gmail.com"

    _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:- pymongo}
  volumes:
    - ./dags:/opt/airflow/dags:consistent
    - ./logs:/opt/airflow/logs:consistent
    - ./plugins:/opt/airflow/plugins:consistent
  user: "${AIRFLOW_UID:-50000}:${AIRFLOW_GID:-50000}"
  depends_on:
    redis:
      condition: service_healthy
    postgres:
      condition: service_healthy
  profiles:
    - airflow
    # - development
    - production

services:
  # ===========================================
  # ETL SERVICES
  # ===========================================
  jm-etl-normalizer:
    image: jm-etl-normalizer
    container_name: jm-etl-normalizer
    build:
      context: ./pipeline/src/
      dockerfile: Dockerfile.normalizer
      args:
        - USER_UID=${USER_UID:-1000}
        - USER_GID=${USER_GID:-1000}
    env_file:
      - ./pipeline/src/.env
    environment:
      - USER_UID=${USER_UID:-1000}
      - USER_GID=${USER_GID:-1000}
    volumes:
      - ./data:/app/data:consistent
    user: "${USER_UID:-1000}:${USER_GID:-1000}"
    profiles:
      - init-db

  jm-elt-snowflake:
    image: jm-elt-snowflake
    container_name: jm-elt-snowflake
    build:
      context: ./pipeline/src/
      dockerfile: Dockerfile.snowflake
      args:
        - USER_UID=${USER_UID:-1000}
        - USER_GID=${USER_GID:-1000}
    env_file:
      - ./pipeline/src/.env
    environment:
      - USER_UID=${USER_UID:-1000}
      - USER_GID=${USER_GID:-1000}
    volumes:
      - ./pipeline/src/snowflake:/usr/src/snowflake:consistent
      - ./data:/usr/src/data:consistent
    profiles:
      - init-db

  jm-elt-dbt:
    image: jm-elt-dbt
    container_name: jm-elt-dbt
    build:
      context: ./snowflake/DBT/
      dockerfile: Dockerfile
      args:
        - USER_UID=${USER_UID:-1000}
        - USER_GID=${USER_GID:-1000}
    env_file:
      - ./snowflake/DBT/.env
    environment:
      - USER_UID=${USER_UID:-1000}
      - USER_GID=${USER_GID:-1000}
    volumes:
      - ./snowflake/DBT:/usr/src/DBT:consistent
    depends_on:
      - jm-elt-snowflake
    profiles:
      - init-db

  # ===========================================
  # FRONTEND : DASHBOARD
  # ===========================================
  frontend:
    image: jm-frontend
    container_name: jm-frontend
    build:
      context: ./frontend
      dockerfile: Dockerfile.dash
    ports:
      - "8080:8080"
    volumes:
      - ./frontend:/app:consistent
    env_file:
      - ./frontend/.env
    profiles:
      - frontend
      - development
      - production
    restart: unless-stopped

  # ===========================================
  # BACKEND : API (FASTAPI)
  # ===========================================
  backend:
    image: jm-backend
    container_name: jm-backend
    build:
      context: ./backend
      dockerfile: Dockerfile
      args:
        - USER_UID=${USER_UID:-1000}
        - USER_GID=${USER_GID:-1000}
    ports:
      - "8081:8081"
    env_file:
      - ./backend/.env
    environment:
      - USER_UID=${USER_UID:-1000}
      - USER_GID=${USER_GID:-1000}
    volumes:
      - ./backend:/usr/src/backend:consistent
    profiles:
      - backend
      - frontend
      - development
      - production
    restart: unless-stopped

  # ===========================================
  # MLFLOW SERVICES
  # ===========================================
  mlflow-tracking:
    container_name: mlflow_tracking
    image: jm-mlflow-tracking
    build:
      context: ./MLFlow
      dockerfile: Dockerfile.mlflow.tracking
      args:
        - USER_UID=${USER_UID:-1000}
        - USER_GID=${USER_GID:-1000}
    ports:
      - "${MLFLOW_EXTERNAL_PORT:-5010}:5000"
    volumes:
      - ./MLFlow/mlruns:/app/mlruns:consistent
      - ./MLFlow/mlflow.db:/app/mlflow.db:consistent
      - ./data:/app/data:consistent
    working_dir: /app
    environment:
      - USER_UID=${USER_UID:-1000}
      - USER_GID=${USER_GID:-1000}
      - MLFLOW_BACKEND_STORE_URI=sqlite:///mlflow.db
      - MLFLOW_DEFAULT_ARTIFACT_ROOT=file:///app/mlruns
    command: >
      bash -c " echo 'üéØ Starting MLflow Tracking Server...' && /opt/venv/bin/mlflow server  --backend-store-uri sqlite:///mlflow.db --default-artifact-root file:///app/mlruns --host 0.0.0.0  --port 5000 "
    healthcheck:
      test: ["CMD", "curl", "-f", "http://mlflow-tracking:5000/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    profiles:
      - init-ml
      - training
      - development
      - production
    restart: unless-stopped

  mlflow-training:
    container_name: mlflow_training
    image: jm-mlflow-training
    build:
      context: ./MLFlow
      dockerfile: Dockerfile.jobmarket_ml
      args:
        - PYTHON_VERSION=${PYTHON_VERSION:-3.11.12}
        - MLFLOW_VERSION=${MLFLOW_VERSION:-2.22.0}
        - INSTALL_GPU_SUPPORT=${INSTALL_GPU_SUPPORT:-false}
        - USER_UID=${USER_UID:-1000}
        - USER_GID=${USER_GID:-1000}
    volumes:
      # Lecture seule - Code et configuration
      # - ./MLFlow/src:/app/src:ro,cached
      # - ./MLFlow/config:/app/config:ro,cached
      # - ./MLFlow/scripts:/app/scripts:ro,cached

      # √âcriture fr√©quente - Logs et cache
      # - ./MLFlow/logs:/app/logs:delegated
      # - ./MLFlow/models:/app/models:delegated
      # - ./MLFlow/cache:/app/cache:delegated

      # Donn√©es critiques - Tracking et donn√©es
      - ./MLFlow/mlruns:/app/mlruns:consistent
      - ./data:/app/data:consistent
    environment:
      - USER_UID=${USER_UID:-1000}
      - USER_GID=${USER_GID:-1000}
      - MLFLOW_TRACKING_URI=http://mlflow-tracking:5000
      - MLFLOW_ARTIFACT_ROOT=/app/mlruns
      - MLFLOW_EXPERIMENT_NAME=${EXPERIMENT_NAME:-apple_demand_experiment}
      - MLFLOW_ENABLE_SYSTEM_METRICS_LOGGING=true
      - MODEL_NAME=${MODEL_NAME:-jobmarket}
      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1
      - OMP_NUM_THREADS=4
      - OPENBLAS_NUM_THREADS=4
    working_dir: /app
    depends_on:
      mlflow-tracking:
        condition: service_healthy
    profiles:
      - init-ml
    # Ressources optimis√©es pour l'entra√Ænement
    deploy:
      resources:
        limits:
          cpus: "${TRAINING_CPU_LIMIT:-4.0}"
          memory: ${TRAINING_MEMORY_LIMIT:-8G}
        reservations:
          cpus: "2.0"
          memory: 4G
    restart: unless-stopped

  mlflow-model:
    container_name: mlflow_model
    image: jm-mlflow-model
    build:
      context: ./MLFlow
      dockerfile: Dockerfile.mlflow.model
      args:
        - MLFLOW_VERSION=${MLFLOW_VERSION:-2.22.0}
        - INSTALL_EXTRAS=true
        - BUILD_ENV=production
        - MODEL_PORT=${MODEL_PORT:-5001}
        - PYTHON_VERSION=${PYTHON_VERSION:-3.9}
        - USER_UID=${USER_UID:-1000}
        - USER_GID=${USER_GID:-1000}
    ports:
      - "${MODEL_EXTERNAL_PORT:-8000}:${MODEL_PORT:-5001}"
    volumes:
      - ./MLFlow/mlruns:/app/mlruns:consistent
      - ./MLFlow/models:/app/models:consistent
    environment:
      - USER_UID=${USER_UID:-1000}
      - USER_GID=${USER_GID:-1000}
      - TRACKING_URI=http://mlflow-tracking:5000
      - MODEL_URI=runs:/4aa5ee5ebfa945eaa75d103cca270238/apple_demand_model
      - MODEL_PORT=5001
      - DEBUG=true
      - LOG_LEVEL=DEBUG
      - PYTHONUNBUFFERED=1
      - MLFLOW_TRACKING_URI=http://mlflow-tracking:5000
      - MLFLOW_ARTIFACT_ROOT=/app/mlruns
      - MLFLOW_EXPERIMENT_ID=2
    working_dir: /app
    depends_on:
      mlflow-tracking:
        condition: service_healthy
    profiles:
      - init-ml
      - training
      - development
      - production
    # Ressources pour serving
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: 2G
        reservations:
          cpus: "0.5"
          memory: 1G
    restart: unless-stopped

  # ===========================================
  # SERVICES UTILITAIRES
  # ===========================================

  # # Service de monitoring (optionnel)
  # monitoring:
  #   image: prom/prometheus:latest
  #   container_name: prometheus_monitoring
  #   ports:
  #     - "9090:9090"
  #   volumes:
  #     - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
  #   profiles:
  #     - monitoring
  #   restart: unless-stopped

  # Service de base de donn√©es PostgreSQL
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data:consistent
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 5s
      retries: 5
    restart: always
    profiles:
      - airflow
      # - development
      - production

  # Service Redis pour cache
  redis:
    image: redis:latest
    ports:
      - 6379:6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 30s
      retries: 50
    restart: always
    profiles:
      - airflow
      # - development
      - production

  # ===========================================
  # AIRFLOW SERVICES
  # ===========================================

  airflow-webserver:
    <<: *airflow-common
    container_name: airflow-webserver
    command: webserver
    ports:
      - 8090:8080
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always

  airflow-scheduler:
    <<: *airflow-common
    container_name: airflow-scheduler
    command: scheduler
    healthcheck:
      test:
        [
          "CMD-SHELL",
          'airflow jobs check --job-type SchedulerJob --hostname "$${HOSTNAME}"',
        ]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always

  airflow-worker:
    <<: *airflow-common
    container_name: airflow-worker
    command: celery worker
    healthcheck:
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always

  airflow-init:
    <<: *airflow-common
    container_name: airflow-init
    command: version
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_UPGRADE: "true"
      _AIRFLOW_WWW_USER_CREATE: "true"
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}

  flower:
    <<: *airflow-common
    container_name: airflow-flower
    command: celery flower
    ports:
      - 5555:5555
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:5555/"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always

# ===========================================
# R√âSEAUX
# ===========================================
networks:
  default:
    driver: bridge
    name: ${DOCKER_NETWORK_NAME:-jobmarket_network}

# ===========================================
# VOLUMES
# ===========================================
volumes:
  mlflow_data:
  postgres-db-volume:
# ===========================================
# PROFILES
# ===========================================
# Profils disponibles :
# - training     : Service d'entra√Ænement ML
# - development  : Training + Model
# - monitoring   : Prometheus pour monitoring
# - postgres     : Base PostgreSQL au lieu de SQLite
# - cache        : Redis pour cache
# - docs         : Documentation avec MkDocs
# - airflow      : Services Airflow (webserver, scheduler, worker, etc.)

# Exemples d'utilisation :
# docker-compose --profile development up                    # Training + Model
# docker-compose --profile training up                       # Entra√Ænement seulement
# docker-compose --profile training --profile monitoring up  # Training + Monitoring
# docker-compose --profile postgres up mlflow-tracking         # MLflow avec PostgreSQL
# docker-compose --profile airflow up                           # Services Airflow
