# ===========================================
# Dockerfile.mlflow.model - Container MLflow Model
# ===========================================

FROM python:3.9-slim AS builder

# Installation des dépendances de build
RUN apt-get update && apt-get install -y --no-install-recommends \
    gcc \
    g++ \
    python3-dev \
    libffi-dev \
    libssl-dev && \
    rm -rf /var/lib/apt/lists/*

# Création d'un environnement virtuel
RUN python -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Copie et installation des requirements
COPY requirements.mlflow.model.txt .
RUN pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir -r requirements.mlflow.model.txt

# ================================
# Image finale (runtime)
# ================================
FROM python:3.9-slim

ARG USER_UID=1000
ARG USER_GID=1000

# Variables d'environnement statiques
ENV PYTHON_ENV=production \
    APP_NAME=mlflow-app \
    DEBUG=false \
    PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1

# Variables d'environnement avec valeurs par défaut
ENV TRACKING_URI=http://mlflow-tracking:5000 \
    MODEL_NAME=jobmarket \
    MODEL_VERSION=3 \
    MODEL_PORT=5001

# Installation des dépendances runtime uniquement
RUN apt-get update && apt-get install -y --no-install-recommends \
    curl && \
    rm -rf /var/lib/apt/lists/* && \
    groupadd -r mlflow --gid=${USER_GID} && \
    useradd -r -g mlflow --uid=${USER_UID} -m mlflow

# Copie de l'environnement virtuel depuis le builder
COPY --from=builder /opt/venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"


# Création du répertoire de travail et changement d'utilisateur
WORKDIR /app
RUN chown -R mlflow:mlflow /app
USER mlflow

# Copie des fichiers applicatifs
COPY --chown=mlflow:mlflow src/serve_model.py .

# Exposition du port
EXPOSE $MODEL_PORT

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:$MODEL_PORT || exit 1

# Commande pour démarrer le serveur avec le script custom
# Utilise les variables d'environnement passées par docker-compose
CMD ["sh", "-c", "python serve_model.py --tracking_uri \"$TRACKING_URI\" --port \"$MODEL_PORT\""]
